<div id="content">
 <div id="outline-container-org232cea9" class="outline-2">
 <h2 id="org232cea9">About</h2>
 <div class="outline-text-2" id="text-org232cea9">
 <p>
 <code>hsync SOURCE TARGET</code> renames files in TARGET so that identical files found in
SOURCE and TARGET have the same relative path.
</p>

 <p>
The main goal of the program is to make folders synchronization faster by
sparing big file transfers when a simple rename suffices.  It complements other
synchronization programs that lack this capability.
</p>

 <p>
By default, files are not renamed and a preview is printed to standard output.
</p>

 <p>
False positives can happen, e.g.Â if two different files in SOURCE and TARGET are
the only ones of this size.  Use the preview to spot false positives and make
sure all files get renamed properly.
</p>

 <p>
You can redirect the preview to a file.  If you run the program using this
preview file as SOURCE, the analysis will be skipped.  This is useful if you want
to tweak the result of the analysis.
</p>

 <p>
Notes:
</p>

 <ul class="org-ul"> <li>Duplicate files in either folder are skipped.</li>

 <li>Only regular files are processed.  In particular, empty folders and symbolic
links are ignored.</li>
</ul></div>
</div>

 <div id="outline-container-orgd1be103" class="outline-2">
 <h2 id="orgd1be103">Examples</h2>
 <div class="outline-text-2" id="text-orgd1be103">
 <p>
 <i>hsync</i> can easily be associated with  <i>rsync</i> (or any synchronization for that
matters) to speed up mirroring:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">$ hsync -p /path/to/storage /path/to/mirror
$ rsync -livr --size-only --delete-excluded /path/to/storage/ /path/to/mirror
</pre>
</div>

 <p>
 <i>hsync</i> also has some interesting side uses.
</p>

 <ul class="org-ul"> <li> <p>
Since  <i>hsync</i> will display a warning on duplicates, it can be used to get the
list of duplicates in a folder:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">$ hsync /path/to/analyze /dev/null > ~/dups.log
</pre>
</div></li>

 <li> <p>
If SOURCE is a  <a href="http://json.org/">JSON</a> file with the following structure:
</p>

 <div class="org-src-container">
 <pre class="src src-js">{
    "oldpath1": "newpath1",
    "oldpath2": "newpath2",
    ...
    "oldpathN": "newpathN"
}
</pre>
</div>

 <p>
 <i>hsync</i> will rename files in TARGET accordingly.  This JSON file can be
generated by hand or dynamically from any other program.  If generated from an
 <i>hsync</i> preview, TARGET needs not be the one used for previewing the renames.
This is useful for complex renaming operations containing cycles (e.g.
 <code>a->b->c->a</code>) or chains (e.g.  <code>a->b->c->d</code>).
</p></li>
</ul></div>
</div>

 <div id="outline-container-orgb0af6ce" class="outline-2">
 <h2 id="orgb0af6ce">Installation</h2>
 <div class="outline-text-2" id="text-orgb0af6ce">
 <p>
See  <a href="https://gitlab.com/ambrevar/hsync">the development page</a>.
</p>
</div>
</div>

 <div id="outline-container-org6735c62" class="outline-2">
 <h2 id="org6735c62">Usage</h2>
 <div class="outline-text-2" id="text-org6735c62">
 <p>
See  <code>hsync -h</code>.
</p>
</div>
</div>

 <div id="outline-container-org02eaa00" class="outline-2">
 <h2 id="org02eaa00">License</h2>
 <div class="outline-text-2" id="text-org02eaa00">
 <p>
See the LICENSE in  <a href="https://gitlab.com/ambrevar/hsync">the source code</a>.
</p>
</div>
</div>

 <div id="outline-container-org992b0bd" class="outline-2">
 <h2 id="org992b0bd">Links</h2>
 <div class="outline-text-2" id="text-org992b0bd">
 <ul class="org-ul"> <li> <a href="https://gitlab.com/ambrevar/hsync">Development page</a> (Please file reports there.)</li>
 <li> <a href="http://godoc.org/gitlab.com/ambrevar/hsync">Implementation details</a></li>
 <li> <a href="https://aur.archlinux.org/packages/hsync/">Arch Linux package (AUR)</a></li>
</ul></div>
</div>
</div>