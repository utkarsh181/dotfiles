<div id="content">
 <div id="outline-container-org3d726d0" class="outline-2">
 <h2 id="org3d726d0">A lurking global problem</h2>
 <div class="outline-text-2" id="text-org3d726d0">
 <p>
Some years ago a friend of mine, a positive and rather carefree person, woke up
one morning and called me for help: she was crying in despair- fore she had lost her
smartphone.
It was too late and only at that moment did she realize how dreadful the
consequences were: her bank details, her contacts, her work, her government IDs,
her signature, all of it was in there and accessible to the lucky one who found her
smartphone the night before.
</p>

 <p>
In hindsight, it may seem obvious and it sounds legitimate to ask: “Why put
yourself in such a fragile situation in the first place?  You should have taken
some precautions, right?”
</p>

 <p>
It turns out that it’s not so obvious for most of us.  In fact, sit back for a minute
and ask yourself:
</p>

 <pre class="example">
What if I lost my computer (or smartphone, or whichever device with personal
data on it) just now?  What would be the consequences?

</pre>

 <p>
It’s not evident what those consequences are until they’ve been brought
to our attention.  So here are a few possible things you could lose:
</p>

 <ul class="org-ul"> <li>Your credentials (login to websites for instance).</li>
 <li>Your money (bank account credentials, cryptocurrency wallet)</li>
 <li>Your personal data, such as pictures and videos.</li>
 <li>Your work data.</li>
 <li>Your contacts.</li>
 <li>Your conversations (emails, etc.).</li>
 <li>And probably much more.</li>
</ul> <p>
A loss can be classified into the following categories:
</p>

 <ul class="org-ul"> <li>Destruction: data is gone.  Question: Would you be able to precisely know
which files were lost?</li>
 <li>Theft: someone else has your data, which means they probably have some of your
credentials, private pictures, maybe money, etc.</li>
 <li>Unknown: you don’t know what happened to your device.  As suggested above, it could have been
stolen or destroyed.  But not knowing may leave you deeply uneasy about
the situation.  You should always assume the worst: theft.</li>
</ul> <p>
Eventually my friend found her phone hidden underneath her bed.  A happy end, that at
least served as a good wake up call… or did it?  I’m not quite sure she spent
time working on  <i>some precautions</i> later.  But who can blame her?  Unless you
are a techie, it is overwhelming to envision how to even get started
with those  <i>precautions</i>.
</p>

 <p>
The effort might not be worth it, so should we care at all, or simply accept the
state of things as they are?
</p>
</div>

 <div id="outline-container-orgc8e7334" class="outline-3">
 <h3 id="orgc8e7334">“Not gonna happen to me!”</h3>
 <div class="outline-text-3" id="text-orgc8e7334">
 <p>
We would naturally think so.  It’s a common psychological fallacy and we should not fool
ourselves, no one is immune to theft or accidental damage.
</p>

 <p>
In fact, hard drives are among the most failure-prone pieces of hardware.  Some
day you’ll start your computer and the hard drive will be gone.  Shit happens.
</p>

 <p>
If you’ve got data stored in only one place, it means there is a  <i>single point
of failure</i>: that’s all you need to face a certain doom.
</p>
</div>
</div>

 <div id="outline-container-orgb30a331" class="outline-3">
 <h3 id="orgb30a331">“I’m safe, my stuff is in the cloud.  Or am I?”</h3>
 <div class="outline-text-3" id="text-orgb30a331">
 <p>
Not so fast: what about your credentials for that “cloud?”
If you device gets stolen, how confident are you that the thief won’t have
access to your data?  Even after a password change?
</p>

 <p>
Is that cloud trustworthy?  Who owns it?  Is it in the owner’s interest
to protect your privacy?
Would you store embarrassing pictures there?  Passwords?  Work data?
</p>

 <p>
Are you fully confident about what you’ve put in there?  What if you’ve leaked a
sensitive piece of data there by mistake?  Can you take it back or will it be
persisted forever on the cloud’s servers?
</p>

 <p>
In this day and age of privacy protection, cloud storage requires extra
cautiousness, and at the bare minimum you should know what you are doing and
understand the full extent of the technical implications.
</p>
</div>
</div>

 <div id="outline-container-org5f9dfab" class="outline-3">
 <h3 id="org5f9dfab">“My weekly backup is enough, right?”</h3>
 <div class="outline-text-3" id="text-org5f9dfab">
 <p>
If you use your computer for work, which seems to be increasingly the case in
our society, it’s probably  <i>not</i> alright.
</p>

 <p>
Think about it this way: how would you feel about a week of work going to waste?
Are you ready to go through it all over again?  As much as you might love your work,
this is at the very least unproductive, if not outright demotivating.
Should your work be something on the creative side (music, writing or maybe
programming?), can you be certain you would produce the same result the second
time?  Will it be better or worse?
</p>

 <p>
Even if you don’t work on a computer, the amount of data accumulated over a week
can be significant enough that it would cost you a lot to lose it.
</p>

 <p>
Conclusion: daily backups are better.
</p>
</div>
</div>

 <div id="outline-container-org7038649" class="outline-3">
 <h3 id="org7038649">Aftermath: The system and data recovery</h3>
 <div class="outline-text-3" id="text-org7038649">
 <p>
When this happens, you are faced with the inevitable rehabilitation part.
It’s hard to give up on computers (or smartphones) these days, even if we are
fed up with them.  We  <i>have to</i> get back on track, and this might be an exhausting process.
</p>

 <p>
Have you ever:
</p>

 <ul class="org-ul"> <li>Spent a week re-installing and re-configuring your computer?  (Or had someone
do it for you?)</li>
 <li>Spent the same amount of time getting as much of your old data back as
possible?</li>
 <li>Lived on with the discomforting itch that you forgot what you had lost?</li>
 <li>Had headaches synchronizing your devices with regard to data, configuration, credentials?</li>
</ul> <p>
Even if you are not the geek kind and happily use the defaults you are provided
with, the system will inevitably be shaped to your liking over time.  You
probably have some favourites, bookmarks, and credentials saved somewhere.
</p>
</div>
</div>
</div>

 <div id="outline-container-org68246fa" class="outline-2">
 <h2 id="org68246fa">“Can we even do anything about it?  Yes we can!”</h2>
 <div class="outline-text-2" id="text-org68246fa">
 <p>
At this point it must be apparent to most of us that those issues are enough a
concern that we can’t just sweep them under the rug.
</p>

 <p>
In this article I am going to address several possible solutions:
</p>

 <ul class="org-ul"> <li>Backup user settings: this makes it trivial to synchronize the exact
user profile to multiple machines.  In other words, this allows you to log in
onto a new machine and replicate your exact working environment in a click.</li>

 <li>Backup data offline and online.  The pros, the cons, and most importantly, the
costs.</li>
</ul> <p>
Unfortunately, this article will mostly be an outline more than a detailed
walk-through since the process is extremely dependent on your operating system
(your choices are quite limited on Windows, for instance).  More importantly, it
will be an attempt at increasing awareness about data protection, privacy and
user-centric control.
</p>

 <p>
For these to work, there are some essential requirements:
</p>

 <ul class="org-ul"> <li>Friction-less: if the process is cumbersome and lengthy, let’s face it, we
will procrastinate.  Even a simple copy-paste to an external hard drive
becomes tiring in the long run and we will eventually postpone it for days and
weeks.</li>

 <li>Fast and low on resources: the process must be fast enough and light on disk
usage so that it can be run at least once a day.  As we saw previously, even
weekly backups could be insufficient.</li>

 <li>Automatable: it should be possible to have it run automatically every day.</li>

 <li>Cheap: we can’t always invest in hardware, servers, service subscriptions, etc.</li>
</ul> <p>
Data can be divided into two categories:
</p>

 <ul class="org-ul"> <li>Public: anything that can be found “out there,” on the market.  Typically
music, movies, programs, etc.
As a special case, much of your user settings can be safely marked as
“public.”</li>

 <li>Private: your vacation pictures, your work, your credentials, etc.</li>
</ul> <p>
The distinction matters because we are going to store some stuff online, in
which case it must be very clear: your private data must be encrypted so that
only you can access it with your private key.
</p>

 <p>
Before getting started, let’s make sure we are on the same page when it comes to
basic digital security and privacy requirements.
</p>
</div>
</div>

 <div id="outline-container-org60aa7bf" class="outline-2">
 <h2 id="org60aa7bf">Computer Security 101</h2>
 <div class="outline-text-2" id="text-org60aa7bf">
 <dl class="org-dl"> <dt>Encryption</dt> <dd> <p>
Regarding private data, there is something very important to
understand: if it’s stored behind a password on the cloud, it
does not mean it’s safe.  It might be safe from external
attackers, but the people running the cloud service have full,
unrestricted access to it.
</p>

 <p>
The only sane way to store data onto an untrusted third party is
to never let your data leave your machine unencrypted.  Don’t
let anyone encrypt data for you if you don’t want them to have
full access to your data: you must do it yourself.
</p>

 <p>
Understand that “encrypting your own data” is  <i>not</i> an involved
process: user-friendly programs will happily do it for you.
</p></dd>

 <dt>Mobile devices</dt> <dd>By their very nature, it’s easy to lose them or to steal
them.  When this happens, the thief could full access
to your critical data (saved password, contacts, bank
details, etc.).  The PIN or the login password won’t protect
you much if they can plug the hard drive onto some other
computer.  This is why storage of private data on mobile devices should
always be encrypted: without the passphrase, the thief
won’t be able to see anything but binary garbage on the device.</dd>

 <dt>Software</dt> <dd>None of the above matters if you cannot trust the underlying system (the
programs and the operating system).  It’s crucial that those are
transparent and open enough for you to trust them.  Which means
that they must be  <a href="https://www.gnu.org/philosophy/free-sw.en.html">free software</a>, open source,  <a href="https://en.wikipedia.org/wiki/Reproducible_builds">reproducible</a>.   <a href="../guix-advance/index.html">Guix</a>
is a good example of such a system.</dd>

 <dt>Password management</dt> <dd> <a href="https://ssd.eff.org/en/node/85/">This animated overview by the EFF</a> should give you a
good feeling of how safe a password manager is and why you need it.  As a bonus,
it makes your life easier: it lifts the burden of having to remember
legions of passwords.</dd>
</dl></div>
</div>

 <div id="outline-container-orgd819e33" class="outline-2">
 <h2 id="orgd819e33">Offline backups</h2>
 <div class="outline-text-2" id="text-orgd819e33">
 <p>
Now that we’ve got a good understanding of the security requirements, let’s get
down the actual issue of safeguarding our data.  The most obvious and
straighforward approach is to buy multiple hard drives to duplicate the data.
</p>

 <p>
It also happens to be a rather cheap approach.  Renting storage online is
usually more expensive per GB.
</p>

 <p>
Never stick to a single hard drive as it would weaken your setup to a  <i>single
point of failure</i>.  Hard drive failures occur quite often, so you are better off
always acquiring hard drives in pairs (at least).
</p>
</div>

 <div id="outline-container-org2c62683" class="outline-3">
 <h3 id="org2c62683">Mirroring</h3>
 <div class="outline-text-3" id="text-org2c62683">
 <p>
The most obvious way to backup your data is to copy it from one drive to the
next.
</p>

 <p>
In practice, this is not ideal:
</p>

 <ul class="org-ul"> <li>It’s too manual.  It should be done automatically.</li>
 <li>It can be a slow process.  If it’s too slow, we won’t do it this often.  If
backups are too spread out between each other, we increase the chances of a
breakdown happening days (or weeks) after the last backup, thus losing much more
data than tolerable.</li>
</ul> <p>
The answer to this is mirroring (like  <a href="https://en.wikipedia.org/wiki/Standard_RAID_levels#RAID_1">RAID1</a>): whenever a file is copied on drive
 <i>A</i>, the computer automatically copies it on drive  <i>B</i>.
</p>

 <p>
There is a pitfall however: if a file is removed from A, it’s also removed from
B.  Removing a file by accident would make it effectively unrecoverable despite
the backup, which kills the purpose of the whole thing.
</p>

 <p>
Enter snapshots.
</p>
</div>
</div>

 <div id="outline-container-org07cb366" class="outline-3">
 <h3 id="org07cb366">Snapshots</h3>
 <div class="outline-text-3" id="text-org07cb366">
 <p>
Snapshots are like a save point of the drive at some point in time.
A killer feature of snapshots is that they can be  <i>mounted</i> like a drive and you
can browse them just like any other folders.
This effectively allows you to use (and compare!) multiple versions of your data
at the same time.  It’s obviously possible to revert back to any snapshot, and
even branch off from them should you decide to work with multiple histories of
your data.
</p>

 <p>
Snapshots are smart enough that they won’t duplicate data, so they are very efficient
both to create (done in a matter of seconds) and to store (they require some
tiny percent of your overall data usage).
</p>

 <p>
Say you store some movies from dear Georges Melliès in kick-ass quality:
</p>

 <ul class="org-ul"> <li>A Trip to the Moon: 200 GB.</li>
 <li>The Impossible Voyage: 300 GB.</li>
</ul> <p>
You take a snapshot named “dawn”.  Total disk usage would be around 500 GB,
snapshot included.
</p>

 <p>
Now remove “A Trip to the Moon” and snapshot to “noon”.  Total disk usage would
still be around 500 GB because the “dawn” snapshot is still holding the movie.
</p>

 <p>
Let’s add a new movie:
</p>

 <ul class="org-ul"> <li>Plan 9 from Outer Space: 700 GB.</li>
</ul> <p>
We take a new snapshot named “dusk”, and now disk usage is around 1200 GB, all 3
snapshots included.
</p>

 <p>
Two movies are “visible”: The Impossible Voyage and Plan 9 from Outer Space.
But we can still go back in time and play A Trip to the Moon.
</p>

 <p>
Last, we delete “dawn”:  A Trip to the Moon is no longer referenced, so it is
effectively removed from the hard drive and some space is freed: we are now
using about 1000 GB.
</p>


 <p>
Snapshots make it much safer to use mirroring: should you accidentally delete a
file, it can be restored from a snapshot present on both drives.
</p>

 <p>
Snapshots are available only to some  <a href="https://en.wikipedia.org/wiki/File_system">file systems</a> (which is determined when you
format the hard drive).  As of January 2019, good solutions include  <a href="https://en.wikipedia.org/wiki/ZFS">ZFS</a> and
 <a href="https://btrfs.wiki.kernel.org/index.php/Main_Page">Btrfs</a>.  From there, use dedicated tools (such as the  <code>btrfs</code> command line tool)
to create snapshots.
</p>

 <p>
Note that hardware-based mirroring like RAID1 is not really necessary with ZFS
or Btrfs, both of which support mirroring themselves.
</p>

 <p>
As of January 2019, those file systems still tend to be used only marginally.  I
think it’s a pity considering what a game changer they provide: by safekeeping
the integrity of users data, computers suddenly become much friendlier machines!
</p>
</div>
</div>

 <div id="outline-container-orgc8e898a" class="outline-3">
 <h3 id="orgc8e898a">Summary</h3>
 <div class="outline-text-3" id="text-orgc8e898a">
 <p>
So here we go, an ideal starting point for offline backups: 2 hard drives both
formatted using a file system with snapshot support and set up for mirroring.
Once formatted, the snapshots can be programmed to be automatically run daily
for instance.  Then there is nothing left to do on the user end:
</p>

 <ul class="org-ul"> <li>It’s all automatic.</li>
 <li>It’s fast.</li>
 <li>It’s space efficient.</li>
 <li>It preserves the complete history of the data: It safeguards against
accidental deletion for instance.</li>
</ul></div>
</div>
</div>

 <div id="outline-container-org59eac77" class="outline-2">
 <h2 id="org59eac77">Online backups</h2>
 <div class="outline-text-2" id="text-org59eac77">
 <p>
Now what if your hard drives all burn down at the same time?
One way to cope with this is to have another computer in a remote location,
but that might not be doable for all of us, as it’s more costly.
</p>

 <p>
Another, also costly solution is online storage.  The great selling point of
many “cloud” solutions is that they protect you from real-life damage.  That is,
assuming the cloud providers have several data-centers and they don’t all burn
down.
</p>

 <p>
But you should not exclusively rely on a cloud service either.  That would also
get you back to a  <i>single point of failure</i>.  What if the company shuts down?
What if they make a mistake and erase your data?  What if you lose your
credentials?  What if…?
</p>

 <p>
Remote storage is nonetheless a great solution for  <i>extra</i> security beyond your
local storage.
</p>

 <p>
Remember however that you should not send anything unencrypted to the remote
server if it belongs to an untrusted third-party.
</p>

 <p>
There are a couple of approaches here:
</p>

 <ul class="org-ul"> <li>Synchronize your ZFS  <i>encrypted</i> snapshots. (I’ve never done it myself, I just
assume this would work in this scenario.)  As of January 2019, Btrfs does not
support snapshot encryption, so it’s a big no-no for remote
synchronization. (Let me know if I’m wrong about this.)</li>

 <li>A dedicated backup manager (as of January 2019,  <a href="https://www.borgbackup.org/">BorgBackup</a> is one of the prime
tools in the field).  They work independently of your file system
capabilities.  It allows you to store encrypted backups remotely.  Since it
supports  <a href="https://en.wikipedia.org/wiki/Data_deduplication">data deduplication</a> (much like snapshots), backups scale well and
won’t occupy much more than the sum of the  <i>different</i> bits of data found
across all backups.</li>
</ul></div>
</div>

 <div id="outline-container-orgbbddfe0" class="outline-2">
 <h2 id="orgbbddfe0">File listings</h2>
 <div class="outline-text-2" id="text-orgbbddfe0">
 <p>
At this point we’ve covered the question of safeguarding our data.  Some
legitimate concerns may have arisen:
</p>

 <ul class="org-ul"> <li>Offline and online backups are great, but admittedly come at a price.  What if
we cannot afford it?  Or only partially, not for all the data?</li>

 <li>In the long run, snapshots may eat up too much space if they keep track of
data that was deleted a long time ago.  So it’s common to delete the older
snapshots over time to regain some disk space, but then we lose part of the
history.</li>

 <li>What about devices without storage space, like mobile devices?  What about
laptops without external hard drives?</li>
</ul> <p>
In all those circumstances, it might not be possible to always keep  track of all our
data.
But there is still some information we can preserve for very cheap: the file
listings.
</p>

 <p>
A file listing is a simple text file of all the files found on the drive, one
full path per line.
</p>

 <p>
While file listings don’t get us data back, they at least provide us with  <i>what</i>
data we have.  This can be very valuable.
</p>

 <p>
Think about it: when you accidentally lose data (e.g. you lose your computer),
can you remember what you lost?  Some of it, certainly, but what about the rest?
Our memory isn’t that great, and it could very well be that we are not able to
recall some important data either (as paradoxical as it may sound).
</p>

 <p>
File listings occupy rarely more than a few megabytes and they are
fast to generate.
</p>

 <p>
File listings can then be kept under  <a href="../vcs/index.html">version control</a>, for instance under some
private  <a href="https://en.wikipedia.org/wiki/Repository_(version_control)">repository</a> of yours (a possibly remote storage space), preferably
encrypted.  This way you’ll not only keep the list of files but also the
 <i>history</i> of the all the files you had at every point in time.
</p>

 <p>
None of this should be done manually and just like snapshots, we are better off
if they are run automatically, e.g. once a day.
</p>
</div>
</div>

 <div id="outline-container-org6de7aa7" class="outline-2">
 <h2 id="org6de7aa7">Reproducible user profile</h2>
 <div class="outline-text-2" id="text-org6de7aa7">
 <p>
Data is not everything and backing up your user settings like regular data is
not the smartest thing to do.  Let’s get down to it without further ado.
</p>
</div>

 <div id="outline-container-org29cda1d" class="outline-3">
 <h3 id="org29cda1d">Versioning your user settings</h3>
 <div class="outline-text-3" id="text-org29cda1d">
 <p>
User settings are everything about your environment:
</p>

 <ul class="org-ul"> <li>Favourite programs.</li>
 <li>All the configurations of those programs.</li>
 <li>Keyboard shortcuts.</li>
 <li>File shortcuts.</li>
 <li>Accessibility configurations.</li>
 <li>etc.</li>
</ul> <p>
Why not back them up like regular data, one may ask?  For a fundamental
difference: the user settings are much more akin to a computer program that
glues together all your other programs.  It’s not static data and thus it
benefits greatly from being transparent and reproducible.
</p>

 <p>
It might not be obvious, but for a better part of it, those settings are far
from being confidential and it’s often fine, even commended, to share them
publicly, like any free software.
</p>

 <p>
There is a long standing tradition among  <a href="https://en.wikipedia.org/wiki/Hacker">hackers</a> to share their user profile
configuration, often nicknamed  <a href="https://github.com/webpro/awesome-dotfiles">dotfiles</a>.  Those are often stored under  <a href="../vcs/index.html">version
controlled</a> repositories such as  <a href="https://git-scm.com/">Git</a>.  You’ll find mine  <a href="https://gitlab.com/Ambrevar/dotfiles">here</a> :)
</p>

 <p>
Depending on your involvement with computers, your user settings might be more
or less extensive.  But even with simpler settings, it is often useful to keep
track of them under version control.  Version control offers the following
perks:
</p>

 <ul class="org-ul"> <li>Decentralized backups: it’s on all your devices, plus on all the servers where
you’ve synchronized them.</li>

 <li>You have full control over what’s in it, what is not, what changes and the
history of changes since the beginning of time.</li>

 <li>Version control checks the data integrity at all times, it gives you a
full guarantee over what you are getting.  Thus it’s fully reproducible.</li>
</ul></div>
</div>

 <div id="outline-container-org786282b" class="outline-3">
 <h3 id="org786282b">Private settings and data</h3>
 <div class="outline-text-3" id="text-org786282b">
 <p>
Some of your settings might be private.  In general, it’s mostly about our
personal activity on a computer, for instance:
</p>

 <ul class="org-ul"> <li>Bookmarks, favourites.</li>
 <li>Bucket lists, “Sticky notes.”</li>
 <li>All sorts of notes.</li>
 <li>Newsfeeds.</li>
 <li>Some preferences of your web browser.</li>
 <li>Contacts, address book.</li>
 <li>Paperwork.</li>
</ul> <p>
This data can be kept under version control as well, but remember  <a href="#org60aa7bf">Computer Security 101</a>: encrypt the repository if it’s synchronized with an untrusted
third-party server.
</p>

 <p>
It’s also possible to only encrypt the sensitive files in a repository.
For instance, you can encrypt files with  <a href="https://gnupg.org/">GnuPG</a> and store the resulting  <code>.gpg</code> in
a Git repository.
To display the history of the encrypted file and the differences between two
versions, add the following to a  <code>.gitattributes</code> file in the Git repository:
</p>

 <pre class="example">
*.gpg diff=gpg
</pre>
</div>
</div>

 <div id="outline-container-orgf5f5b05" class="outline-3">
 <h3 id="orgf5f5b05">User profile initialization</h3>
 <div class="outline-text-3" id="text-orgf5f5b05">
 <p>
Your user profile is not just about configuration files and data.  There might
be some tasks you’d like to run to initialize your environment back to the
desired state.
</p>

 <p>
Most obviously, your favourite programs must be installed.
Furthermore, you’ll probably want to initialize the credentials (e.g.
the password manager), synchronize your emails, etc.
</p>

 <p>
Needs vary and it’s hard to fit everyone’s shoes at the same time, so over time
I wrote a  <a href="https://gitlab.com/ambrevar/dotfiles/raw/master/.local/bin/homeinit">script</a> (i.e. a small, quickly-patched-together program) that would fit
all my personal requirements:
</p>

 <ul class="org-ul"> <li>Install the list of my programs.</li>
 <li>Retrieve my private data.</li>
 <li>Retrieve my password manager database.</li>
 <li>Retrieve and install my user settings (the “dotfiles”).</li>
 <li>Retrieve my emails.</li>
 <li>And some other nits…</li>
</ul> <p>
The result is the following: after a fresh installation, or the first time I log
in on a new machine, I run the script, wait a few seconds (or minutes, depending
on the Internet connection) and there it is: my exact user environment as I left
it last time I  <i>synchronized</i> my user profile.
</p>
</div>
</div>

 <div id="outline-container-org06447c8" class="outline-3">
 <h3 id="org06447c8">User profile synchronization</h3>
 <div class="outline-text-3" id="text-org06447c8">
 <p>
The user profile must also be synchronized.  While the “dotfiles”
synchronization is done with the version control system, there is more:
</p>

 <ul class="org-ul"> <li>Un-synchronized work files.</li>
 <li>Un-synchronized credentials (e.g. your private keys, your password manager’s database).</li>
 <li>The updated list of your installed programs.</li>
 <li>The file listings.</li>
</ul> <p>
Again, your mileage may vary.  So I wrote  <a href="https://gitlab.com/ambrevar/dotfiles/raw/master/.local/bin/homesync">another script</a> to do all the above for
me.  In particular, it reports all version control repositories that are not
synchronized, so that I remember to finish and synchronize my pending work on
all projects before going to bed.  This can be done automatically if need be.
</p>

 <p>
A synchronization takes no more than a couple of seconds to run and can easily
be done every day, even automatically.
</p>

 <p>
At this point, if I lose my computer, I’ll be able to restore an environment
matching the last synchronization that won’t be older than a day.  In my case,
the process boils down to:
</p>

 <ul class="org-ul"> <li>Get a bootable USB of  <a href="http://guix.gnu.org/download/">Guix</a>.</li>
 <li>Fetch my Guix system configuration script from my dotfiles.</li>
 <li>Run  <code>guix system init configuration-script.scm</code>.</li>
 <li>Start the newly installed computer and log in.</li>
 <li>Run my user initialization script from my dotfiles.</li>
</ul> <p>
That’s it!
</p>

 <p>
It’s very relieving in the long-run to live with the confidence that the worse
case scenario is not so bad at all.
</p>
</div>
</div>

 <div id="outline-container-org5e26e00" class="outline-3">
 <h3 id="org5e26e00">Note to hackers: Script implementation details</h3>
 <div class="outline-text-3" id="text-org5e26e00">
 <p>
If you are not familiar with programming, you can safely skip this section.
</p>

 <p>
The scripts:
</p>

 <ul class="org-ul"> <li>Initialization script:  <a href="https://gitlab.com/ambrevar/dotfiles/raw/master/.local/bin/homeinit">https://gitlab.com/ambrevar/dotfiles/raw/master/.local/bin/homeinit</a></li>
 <li>Synchronization script:  <a href="https://gitlab.com/ambrevar/dotfiles/raw/master/.local/bin/homesync">https://gitlab.com/ambrevar/dotfiles/raw/master/.local/bin/homesync</a></li>
 <li>Program listing script:  <a href="https://gitlab.com/ambrevar/dotfiles/raw/master/.local/bin/package-lister">https://gitlab.com/ambrevar/dotfiles/raw/master/.local/bin/package-lister</a></li>
 <li>File listing script:  <a href="https://gitlab.com/ambrevar/dotfiles/raw/master/.local/bin/dataindex">https://gitlab.com/ambrevar/dotfiles/raw/master/.local/bin/dataindex</a></li>
</ul> <p>
I originally wrote those scripts a long time ago with different target systems
in mind (FreeBSD and Arch Linux among others).  Some requirements were:
</p>

 <ul class="org-ul"> <li>Interpretable: I must be able to hack them in case I need to adapt something
to the system.</li>
 <li>Retrievable over the network and verifiable.  So I would host them under
version control.</li>
 <li>Portable: they must run everywhere with no dependencies.</li>
 <li>Idempotent: Running it multiple times should produce the same result.</li>
 <li>Lazy: Only perform a task if necessary.  A second run should terminate in seconds.</li>
</ul> <p>
For portability’s sake, I  started off writing a POSIX shell script, since it
seems to be the only language that can be understood on almost all systems.
</p>

 <p>
In hindsight, this proved to be a debatable choice as the script grew and more
complex features were added.  POSIX shell is a very poor and limited
language to program with.
</p>

 <p>
Today, I mostly use Guix, so portability is less of a concern.
Even then, it’s not far fetched to ask for a tiny requirement: a widely
available interpreter.  Then the installation process would only ask for one
more step: the installation of the interpreter.
</p>

 <p>
I could have sticked to a much more powerful programming language.  Even then,
portability would not be such an issue:  <a href="https://www.gnu.org/software/guile/">Guile Scheme</a>, for instance, is a
nonrestrictive requirement as it’s rather light and widely available.  Finally
it’s about time we broke with the tradition that the only portable scripting
language should be one of the worst.  We need to move on and use better
programming languages globally.
</p>

 <p>
I’m planning to write a more complete, extensible and universal “user profile
management” tool, probably in Guile Scheme.
</p>
</div>
</div>
</div>

 <div id="outline-container-orgce8284d" class="outline-2">
 <h2 id="orgce8284d">The data frenzy: a social drift of the new millennial?</h2>
 <div class="outline-text-2" id="text-orgce8284d">
 <p>
This was a long article.  At this point your might wonder: “Why should we care so
much about our data anyways?  Aren’t we getting too attached to technology?”
</p>

 <p>
It’s a vast topic and there is probably too much to talk about to fit in this one
article.
So I’ll keep it to just a few points for now:
</p>

 <ul class="org-ul"> <li>The blame does not have to be put on our attachment to data, but rather on the
setup and the infrastructure.  Data attachment and data loss crises
essentially occur because currently user data is under the spotlight while
typical computer setups are extremely fragile.  The social and psychological
question of data-attachment would mostly be moot if the technology of backups
and users’ control over their data was appropriate to its level of importance.</li>

 <li>This article is not about  <i>the effort every user should make</i>, it’s how
vendors should set up their products so that  <i>everything is ready for
backup-and-control out of the box</i>.</li>

 <li>We don’t  <i>have to</i> be attached to our data.  Having the  <i>possibility</i> to
control it and to rely on it is a different thing.  I believe we should all
have the right both to ignore our data or to depend on it.  It should be our
own decision, hence the importance of user-centric control.</li>

 <li>Data is increasingly reflecting  <i>power</i>.  When external entities own our data
(even part of it), such as corporates with poor incentives to stand for us, we
are threatening our democratic rights on the political level, and our
individuality on the social level.  If we are the only and full proprietors of
our own data, we remain in control to stand strong as first class citizens and
individuals.  Should we be data-craving techies or not, society
is making a choice here, and we need to enforce our rights as its members,
lest we lost our place in society.</li>
</ul> <p>
On a more abstract level, data can be seen as a form of human consciousness
expansion.  Our brain is limited and can store only so much information.
</p>

 <p>
There was a time were mankind was little aware of notions such as freedom and
choice.  The philosophy of individualism is a rather recent evolution.
User data could be just another form of human evolution, that of memory
expansion.  It might be hard to foresee the benefits at this early stage, but so
was it certainly when the Enlightenment philosophers were thinking ideas of
individualism.  Time will tell, I suppose.
</p>

 <p>
An interesting experiment is that of the Facebook data, for those who’ve tried
the social network for a couple of months or years.  Facebook allows its users
to download an archive of a collection of data that Facebook has gathered about
them since you created an account.  (Note that it’s most certain that lots of
data is missing from that archive, and Facebook knows way more.)  Going through
the archive for 5 minutes will give you a look back it your own self from months
and years ago, to a level of detail you would not be capable of digging out
yourself with your memory alone.  Yes, to some extent, social networks like
Facebook might know more about yourself than yourself.
</p>

 <p>
The Internet-connected society is growing to become an entity that knows more
about human beings than themselves.  If we as individuals don’t want to be
overwhelmed and overtaken in this play of power, we might need to extend our
capabilities and what defines us to something that can safeguard our
power against this societal paradigm shift.
</p>
</div>
</div>

 <div id="outline-container-org1ff239b" class="outline-2">
 <h2 id="org1ff239b">Future work</h2>
 <div class="outline-text-2" id="text-org1ff239b">
 <p>
I believe the setup I’ve presented in this article provides some definite
benefits, and yet there is much left to improve.  In particular when it comes
to universal accessibility.
</p>

 <p>
Now let’s dream on a little bit and munch over some crazy ideas.
</p>

 <p>
 <i>(Don’t hesitate to let me know if this is nowhere close to feasible, or, on the
contrary, if it’s already done or close to being achievable.)</i>
</p>

 <p>
First of all, it’s quite clear today that many people don’t like to have to
bother with data storage.  The “cloud” is such an attractive concept, it would
be really nice if we could use it without its privacy-infringing pitfalls.
</p>

 <p>
So if we really want to go in that direction, they are a few requirements:
</p>

 <ul class="org-ul"> <li>It should all be encrypted.  So regular users must properly learn about
authentication systems and understand what it means to keep a secret key
secret, for real.</li>

 <li>It should be distributed, which means there would be no single point of
failure, nowhere in the world.  User data should not be censored or blocked or
removed without the user consent.</li>

 <li>Free and huge (unlimited?) storage space.  Paying for data storage poses a
threat to social equality, as richer people would have the possibility to
store more data and thus have a more extensive “memory,” if not individuality.</li>
</ul> <p>
In their  <a href="https://www.youtube.com/watch?v=HUVmypx9HGI">talk</a>, the  <a href="https://ipfs.io">IPFS</a> team shows how disk space over cost ratio has increased
more rapidly than Internet bandwidth over cost.  This could be interpreted in
a sense that if we all
shared our storage space in a storage pool distributed over the Internet, we
could simulate a seemingly infinite storage space available for everyone to use
(with smart space optimization like data deduplication and compression).
</p>

 <p>
IPFS is a prime implementation of this, but some pieces of the puzzle are still
missing.  For one, the incentive for every user to put their storage space to
availability for everyone to use.  Should we work out such a system, we would
basically re-create Silicon Valley’s Pied Piper where our data is everywhere and
nowhere at the same time, and there would be no more need for a “Download”
button!
</p>
</div>
</div>

 <div id="outline-container-org57e0740" class="outline-2">
 <h2 id="org57e0740">Special thanks</h2>
 <div class="outline-text-2" id="text-org57e0740">
 <p>
John Mercouris
</p>
</div>
</div>
</div>