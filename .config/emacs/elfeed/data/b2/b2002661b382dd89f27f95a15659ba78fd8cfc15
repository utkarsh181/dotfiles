<div id="content">
 <p>
The first thing we should teach about driving a vehicle is where the brakes are.
I believe that the same reasoning applies to computers.  Before teaching any
sort of text/web editing or programming, wouldn’t it be reasonable to teach how
to  <i>save your work</i>?
</p>

 <p>
There is something essential that could be taught first hand and which I believe
to be the number one skill that will remain invaluable for the rest of your life
as a computer user:  <i>version control systems</i> (VCS).
</p>

 <p>
From  <a href="https://en.wikipedia.org/w/index.php?title=Version_control&oldid=740941888">Wikipedia</a>:
</p>

 <blockquote>
 <p>
Version control […] is the management of changes to documents, computer
programs, large web sites, and other collections of information.
</p>
</blockquote>

 <p>
For a concrete and straightforward example, look at the  <a href="https://en.wikipedia.org/w/index.php?title=Version_control&action=history">history</a> of a Wikipedia
page.
</p>

 <p>
A VCS is:
</p>

 <ul class="org-ul"> <li>a glue to collaboration,</li>
 <li>a foundation to cloud-computing,</li>
 <li>the ultimate backup,</li>
 <li>a looking glass to the past.</li>
</ul> <p>
Are you a book or a blog author?  A scientist?  An administrator?  An accountant?
If you find yourself writing and maybe collaborating with text documents in any
form, a VCS will be your best friend.
</p>

 <p>
When computer users are not aware of the existence of VCSes, they are left alone
with poor tools for tasks as simple as saving and collaborating, which yields to
a lot of frustration.  A common example would be exchanging files via e-mail:
</p>

 <ul class="org-ul"> <li>It is cumbersome to send or save the attachments every time.</li>
 <li>It generates confusion in the versions.</li>
 <li>Conflict resolution is a nightmare.  (When 2 e-mails are cross-sent.)</li>
</ul> <p>
A few free, decentralized and popular VCS include:
</p>

 <ul class="org-ul"> <li> <a href="https://git-scm.com">git</a></li>
 <li> <a href="https://www.mercurial-scm.org/">mercurial</a> (hg)</li>
 <li> <a href="http://bazaar.canonical.com/">bazaar</a> (bzr)</li>
</ul> <p>
A VCS can hold much of your project information:
</p>

 <ul class="org-ul"> <li>history of changes,</li>
 <li>version tags,</li>
 <li>authoring.</li>
</ul> <p>
Thus the VCS metadata should be stored in an  <i>open format</i>, that is, in a format
that is open for viewing and editing at any time in the future.  Should the VCS
become un-maintained, the OS support be dropped, or any other catastrophe occur,
the project information can be recovered.
</p>

 <p>
VCSes should be decentralized. See this  <a href="http://www.youtube.com/watch?v=4XpnKHJAok8">Tech Talk: Linux Torvalds on git</a> for a
rationale.
</p>

 <p>
Other features:
</p>

 <ul class="org-ul"> <li>Permanent online access for files hosted on a server (public or private).</li>
 <li>Offline access: decentralization means you do not need to be connected to
perform any sort of VCS management.</li>
 <li>Content guarantee: content is check-summed, which means that no
data-corruption is left unnoticed.</li>
 <li>Show differences across versions.</li>
 <li>Handle conflicts.</li>
 <li>Fine control of the content that is under version control: no spurious file
(temp file), no wrong save of a file, clear view at what is being synced (up
and down).</li>
</ul> <p>
Popular sharing services like Dropbox suffer from the terrible drawback of
hiding the syncing operation details: when offline, if you change the content
then go online again, what happens?  Will Dropbox discard the changes or upload
them?  What if there is a conflict, i.e. some file got changed in the Dropbox
repository in the meantime?
</p>

 <p>
If you care about the content of your files, do not use such tools.  It is
essential to have full control over every VCS operation.
</p>

 <p>
There is one pitfall with VCSes: once you have started working in a team, the
VCS cannot (or at least not so easily) be changed.  And everybody has to abide
by the choice of the VCS.  It is the only tool that team-members are forced
using and must be agreed upon; the users are free to use their own favorite
tools for the rest.  This as opposed to, say, Google Documents where the full
tool-suite is bundled into one service: the web profile, the VCS, the document
processor, the editor, etc.
</p>

 <p>
Not all computer data is “versionable” though.  Everything (pictures, videos,
music) can be uploaded to a VCS server, but to make the best out of your VCS the
content should be in text format, so that the VCS can display the differences
between versions.  Besides, it is far more efficient in terms of disk usage and
will save a lot on bandwidth.
</p>

 <p>
Avoid  <code>.docx</code>,  <code>.odt</code> or other *Office documents: they are archived-files, a VCS
will treat them as raw data, it won’t be able to “see” the textual content.
</p>

 <p>
For book or blog authoring, prefer text formats such as  <a href="https://orgmode.org/">Org</a>,  <a href="http://daringfireball.net/projects/markdown/">Markdown</a> or  <a href="https://www.latex-project.org/">LaTeX</a>.
</p>

 <p>
Text-formats can have some more exotic uses:
</p>

 <ul class="org-ul"> <li>Spreadsheets with Org-mode.</li>
 <li>Vector graphics (e.g. with  <a href="http://asymptote.sourceforge.net/">Asymptote</a>: for geomatrical or scientific drawings, this
is much more efficient than drawings by hand with  <a href="https://inkscape.org/">Inkscape</a> and the like.</li>
</ul> <p>
Last but not least, a VCS can be somewhat technical and challenging to master,
especially when working in a group.  Which is why I believe a proper
introductory course is necessary.
</p>
</div>