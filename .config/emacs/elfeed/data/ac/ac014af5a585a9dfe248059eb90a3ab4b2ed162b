<div id="content">
 <div id="outline-container-orgdce8262" class="outline-2">
 <h2 id="orgdce8262">About</h2>
 <div class="outline-text-2" id="text-orgdce8262">
 <p>
This is the home page of my research on inverse procedural generation applied to
building facades.  A quick presentation of the concept follows.  I will update
this page to keep track of my progress.
</p>
</div>
</div>

 <div id="outline-container-org73fc3b6" class="outline-2">
 <h2 id="org73fc3b6">Background</h2>
 <div class="outline-text-2" id="text-org73fc3b6">
 <p>
In computer graphics it is often useful to generate the content automatically to
ease the burden of drawing everything by hand.  Common examples include cities,
forests, landscapes, oceans, or roads, which often show up in movies, video
games, or urban planning simulations to name a few.  These features clearly
follow some patterns.  Nonetheless they cannot be drawn with a naive tiling which
would result in something too geometrical to come from the real world.  Nature
and mankind induce some randomness and chaos on the environment.
</p>

 <p>
This is where procedural graphics prove useful: with a set of rules combined to
some transformation functions, one can generate a whole city with its underlying
randomness by specifying a few parameters.
</p>
</div>
</div>

 <div id="outline-container-org814ce37" class="outline-2">
 <h2 id="org814ce37">Goals</h2>
 <div class="outline-text-2" id="text-org814ce37">
 <p>
The use of procedural generator can be overwhelming: they usually require of
dozens of inter-related parameters.  A tiny alteration in a parameter value may
dramatically affect the result.  Therefore, the biggest challenge in procedural
graphics is the understanding of the parameter set for every generator.
</p>

 <p>
To overcome the limitation of procedural generation, we could think of a
different approach: from a real-world input, we can deduce the right parameter
set that generate the desired result.  This is called  <i>inverse procedural
generation</i>.
</p>

 <p>
Nonetheless facade formalization might involve hundreds of parameters.  Some of
them may affect minor details in the output, others may transform the result
drastically.  In other words, they have different psychophysical properties,
i.e. they affect the way we perceive the building unevenly.
</p>

 <p>
Which one makes it look believable? Does it look old or sad? Does it belong to a
specific neighbourhood of some city? A psychophysical study of the architectural
properties is relevant to improve the generation process.
</p>
</div>
</div>

 <div id="outline-container-org1d72113" class="outline-2">
 <h2 id="org1d72113">Progress</h2>
 <div class="outline-text-2" id="text-org1d72113">
</div>
 <div id="outline-container-org9a600f6" class="outline-3">
 <h3 id="org9a600f6">Forward generation</h3>
 <div class="outline-text-3" id="text-org9a600f6">
 <p>
The first logical move is to master the forward procedural generation.  Thus I
have implemented a prototype in Lua/Cairo based on the papers  <i>Instant
Architecture</i> (Wonka et al.) and  <i>Procedural Modeling of Buildings</i> (Müller et
al.).
</p>
</div>
</div>

 <div id="outline-container-org209327d" class="outline-3">
 <h3 id="org209327d">Inverse generation from a data structure</h3>
 <div class="outline-text-3" id="text-org209327d">
 <p>
A facade can be seen as a tile of rectangular regions.  This model can be
conveniently stored into a data structure.
</p>

 <p>
Before working directly with pictures, we can feed our inverse data generator
with a manually created data structure.
</p>

 <p>
As for the forward generator, I have implemented a Lua prototype with some basic
heuristics.  The (only?) reference I have been using is  <i>Inverse Procedural
Modeling of Facade Layouts</i> (Fuzhang Wu et al.).
</p>

 <p>
The data structure and its associated functions are actually quite interesting
to study.  I will devote an article to it later.
</p>
</div>
</div>

 <div id="outline-container-org611fd55" class="outline-3">
 <h3 id="org611fd55">Pre-processing</h3>
 <div class="outline-text-3" id="text-org611fd55">
 <p>
The input data is real-world pictures.  Some work is needed before we can get to
the convenient data structure our inverse generator can use.
</p>

 <ul class="org-ul"> <li> <a href="./perspector.html">Perspective correction</a>: it is easier to work on orthographic data.  Real life
pictures of facades are never perfectly aligned, but this can be easily
rectified.  Even with some specialized hardware it is not always possible to
take orthographic pictures of facades, e.g. in narrow streets with tall
buildings.</li>

 <li> <p>
Occlusion handling: facade picture are usually not barebone, a lot of elements
cannot be taken away when taking the picture.  This includes streets signs and
lights, bystanders, trees, and so on.  They should not be included in the final
data structure, thus they should be removed.  It is possible to handle most
cases automatically.
</p>

 <p>
To implement.  It is still possible to work without it on ideal facades.
</p></li>

 <li> <p>
Lighting normalization: depending on the time of the day, the weather and the
cast shadows, not all parts of the facade might illuminated equally.  This can
disturb the segmentation process, e.g. a shadow on a region can be seen as
different regions.
</p>

 <p>
To implement.
</p></li>
</ul></div>
</div>

 <div id="outline-container-org1487860" class="outline-3">
 <h3 id="org1487860">Segmentation</h3>
 <div class="outline-text-3" id="text-org1487860">
 <p>
Once our images have been pre-processed, the segmentation can be run serenely.
The quality of the result can hardly be garanteed.  Indeed, there is no formal
deterministic definition of a region, this is mostly a human criteria.  A
semi-automatic segmenter sounds a reasonable choice here: first pass is fully
automatic; for the second pass, control is left to the user who can then merge
or split regions, resize them, group them, and so on.
</p>

 <p>
To implement.
</p>
</div>
</div>
</div>

 <div id="outline-container-orgf8b827f" class="outline-2">
 <h2 id="orgf8b827f">Future</h2>
 <div class="outline-text-2" id="text-orgf8b827f">
 <p>
The current state of the art is fairly limited, yet certainly extensible to 3D.
This is definitely some field to explore.
</p>
</div>
</div>

 <div id="outline-container-orgeb8b754" class="outline-2">
 <h2 id="orgeb8b754">References</h2>
 <div class="outline-text-2" id="text-orgeb8b754">
 <ul class="org-ul"> <li>Instant Architecture, Peter Wonka et al.</li>
 <li>Inverse Procedural Modeling of Facade Layouts, Fuzhang Wu et al.</li>
 <li>Procedural Modeling of Buildings, Pascal Müller et al.</li>
</ul></div>
</div>

 <div id="outline-container-orgb28fefd" class="outline-2">
 <h2 id="orgb28fefd">Links</h2>
 <div class="outline-text-2" id="text-orgb28fefd">
 <ul class="org-ul"> <li> <a href="../perspector/index.html">Perspector</a> - a control-point-based perspective rectification tool.</li>
</ul></div>
</div>
</div>