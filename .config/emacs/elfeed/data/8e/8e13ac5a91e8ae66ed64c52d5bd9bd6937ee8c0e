<div id="content">
 <p>
Quite often friends and acquaintances with no programming skills
come to me and ask for recommendations on “how to do this and that” with a
computer.  Often, those questions are about workflows, such as batch processing
data (audio, pictures, text, web sites), backing up data, or a more general
work/leisure tasks.
</p>

 <p>
I realize that many empowering technologies are not so well known to a wider
public and could benefit many more people, so I
went on to write an article for all of us out there that make a serious use of
computers and want to be more proficient, without diving too deep into the
arcanes of programming.
</p>

 <p>
Admittedly, some of the techlogies below require a decent level of
understanding, so you might have to deal with a little bit of reading.
</p>

 <p>
Be aware that I chose the term  <i>non-programmers</i> to refer to users comfortable
with a computer,  <i>not beginners</i>.   <i>Indeed, this article addresses tech-minded
users who already have some familiarity with computers.</i> If you’ve ever
installed an operating system, run a command line or tried to solve any sort of
problems with a computer, you are probably part of the target audience.
</p>

 <p>
I believe that the effort is definitely worth the outcome and that anyone
frequently dealing with computers can tremendously benefit from all these
technologies, should you be a music composer or a designer.
</p>

 <p>
 <i>Disclaimer:</i> None of these technologies require proprietary or closed source
software.
</p>

 <div id="outline-container-org98f22ac" class="outline-2">
 <h2 id="org98f22ac">Version control: Git</h2>
 <div class="outline-text-2" id="text-org98f22ac">
 <p>
Regardless of what keeps us busy with computers, we almost always have to deal
with text at some point.
</p>

 <p>
It’s a common process to edit a pragraph of text and the next day we want to
compare it with how it was before the editting.  It can be frustrating to not
have access to previous versions, for the sake of comparing or even restoring
them.
</p>

 <p>
 <i>Version control</i> is a workflow for working alone or in a team on text documents
(for instance web sites, books or any kind of notes).  It gives you a history of
all changes, “diff” views between any two changes (think  <a href="https://en.wikipedia.org/w/index.php?title=Version_control&action=history">Wikipedia history</a>), and
 <a href="../vcs/index.html">much more</a>.
</p>

 <p>
 <a href="https://git-scm.com/">Git</a> is a popular version control tool.  It comes with various graphical
interfaces which improve a lot compared to the barren command line interface.
</p>

 <p>
Maybe more importantly,  <i>version control</i> brings us to a deeper level of
understanding of how we ought to develop and archive  <i>all knowledge</i>, in the most
general sense.
</p>
</div>
</div>

 <div id="outline-container-org870b989" class="outline-2">
 <h2 id="org870b989">Filesystems: ZFS or Btrfs</h2>
 <div class="outline-text-2" id="text-org870b989">
 <p>
You probably have data you care about, from family pictures to projects.
Data must be stored somewhere, and the  <i>way</i> we store data changes everything.
</p>

 <p>
As of October 2019, online storage still has to prove itself to be completely
satisfactory in terms of cost, privacy and reliability (the biggest corporate
cannot guarantee they won’t lose your data).
</p>

 <p>
Hard drives are rather cheap (compared to the full cost of a computer) and with
the right technologies, you can get top-notch flexibility for the least amount
of effort.  Local hard drives are obviously ideal for privacy and leave you in
full control of your data.
</p>

 <p>
 <a href="https://en.wikipedia.org/wiki/Zfs">ZFS</a> and  <a href="https://btrfs.wiki.kernel.org/index.php/Main_Page">Btrfs</a> are two  <a href="../source/filesystems/index.html">file systems</a> that can be seen as the “Git of data.”
</p>

 <ul class="org-ul"> <li>They give you history of your data and you can “diff” the changes between the
various snapshots.</li>

 <li>Possibility to roll-back to a previous state, say you worked on pictures or an
audio track for which you want to access the previous version.</li>

 <li>Efficient backup.  It’s good practice to have at least one backup that’s
always in sync.  These advanced file systems make it easy and cheap, since a
backup synchronization will only syncronize the changes instead of the whole
data.
For instance, say you renamed a huge  <code>videos</code> folder.  A dumb synchronization
program would delete the old folder and the backup drive and retransfer
everything.  With ZFS or Btrfs, only the renaming is applied on the backup
drive, which is done in the matter of a second.</li>
</ul> <p>
If you are unsure which file system to set up, pick the one that’s the easiest
to install for you.
</p>

 <p>
On a tangent topic, if you are going to format your drives, you might want to
encrypt them (and you probably should if it’s a laptop).  ZFS has an encryption
option while for Btrfs you’ll need to encrypt the drive separately.
</p>

 <p>
I wrote more extensively on filesystems and encryption in  <a href="../reproducible-computing-environments/index.html">a seprate article</a>.
</p>
</div>
</div>

 <div id="outline-container-org698ea93" class="outline-2">
 <h2 id="org698ea93">Cryptography: SSH, GnuPG, KeepassXC</h2>
 <div class="outline-text-2" id="text-org698ea93">
 <p>
In this day and age, privacy is under the spotlight.  I believe that digital
citizens of an increasingly technological world require a decent  <a href="https://ssd.eff.org/en/module/what-should-i-know-about-encryption">understanding
of basic cryptography</a> to be fully empowered.  Knowing how to deal with public
and private keys can be crucial.
</p>

 <p>
 <a href="https://en.wikipedia.org/wiki/Ssh">SSH</a> is a simple protocol for public and private key management.  It can be used
to safely access systems remotely and to transfer files between two computers
you control.
</p>

 <p>
 <a href="https://gnupg.org/">GnuPG</a> is an extensive software suite that deals with the PGP protocol.  It
can be used for digital signatures, encrypted emails and file encryption among
other things.  GnuPG can also manage SSH keys.
</p>

 <p>
Passwords are another hot topic: innocent users who use too-weak passwords can
easily be compromised with devastating consequences.  If you came up with a
password yourself, you will have to think again: Your 15-character long password
with special characters is probably not safe against a powerful attacker who can
dedicate months and a supercomputer to crack your password.
</p>

 <p>
 <a href="https://ssd.eff.org/en/module/animated-overview-using-password-managers-stay-safe-online">This short video by the Electronic Frontier Foundation</a> provides a good
explanation on why you should use a password manager to stay safe online.
</p>

 <p>
 <i>Bonus:</i> it’s so much more convenient and you won’t have to remember any password
ever again, beyond your “master passphrase.”
</p>

 <p>
Watch out for online or non-open password managers: Can you really trust them?  If
you can’t answer this question with confidence, you should probably not use them.
</p>

 <p>
 <a href="https://keepassxc.org/">KeepassXC</a> is an easy-to-use, free software password manager.
</p>
</div>
</div>

 <div id="outline-container-org6f85478" class="outline-2">
 <h2 id="org6f85478">Text editor: Emacs</h2>
 <div class="outline-text-2" id="text-org6f85478">
 <p>
We all need to write text, so a text editor is always useful.
</p>

 <p>
With the legions of text editors out there, this is a hard one to recommend.
But most of them fall short for a couple of reasons:
</p>

 <ul class="org-ul"> <li>Either non-free software.</li>

 <li>Or too specific, e.g. good for web development, but bad for other things.</li>

 <li>Or too weak, e.g. no rectangular selection, no sorting of X fields, etc.</li>

 <li>Or too ephemeral: text editors come and go.  But the less geeky among us might
not want to spend time getting accustomed to an editor, only to be forced to
switch because development stopped.</li>
</ul> <p>
Emacs may seem a surprising choice considering it targets a rather geeky
audience and that it has a steep learning curve.  But this issue can be mostly
alleviated by switching to CUA bindings ( <code>Alt-x cua-mode</code>) and by  <a href="https://melpa.org/">installing a
few packages</a> like  <a href="https://emacs-helm.github.io/helm/">Helm</a>, or more simply by using a  <a href="http://www.emacs-bootstrap.com/">pre-customized configuration</a>.
There are many different configuration flavours out there, pick what you like
most.
</p>

 <p>
Regarding the above points, Emacs scores petty well:
</p>

 <ul class="org-ul"> <li>It’s free software.</li>
 <li>It’s very general.  There is more or less one “mode” for anything you could
ever need, from taking notes to writing books, through professional web
development.</li>
 <li>It’s powerful for text editing and batch processing text.</li>
 <li>It’s one of the oldest pieces of software still in use, so it’s probably here
to stay.</li>
 <li>It’s one of the best options to edit TeX documents (which users in academia
might appreciate).</li>
</ul> <p>
But more importantly, I recommend Emacs here because it provides nice
interfaces to other points in this article.  For instance, Emacs has stellar
Git integration with  <a href="https://magit.vc/">Magit</a>.
</p>

 <p>
Read on.
</p>
</div>
</div>

 <div id="outline-container-org2a72ba3" class="outline-2">
 <h2 id="org2a72ba3">Shell: Emacs’  <code>M-x shell</code></h2>
 <div class="outline-text-2" id="text-org2a72ba3">
 <p>
If you’ve been with dealing with computers for a while, chances are that you’ve
come across a  <i>command line interface</i>, maybe via “terminals” (or “consoles”).
</p>

 <p>
Indeed, they are many things the command line interface lets you do that can be
hard to do otherwise.  Stupid examples that come to mind:
</p>

 <ul class="org-ul"> <li> <p>
Batch processing pictures, PDFs, music files…  For instance, with
 <a href="https://imagemagick.org/index.php">ImageMagick</a> you can resize all files with the  <code>jpg</code> extension:
</p>
 <pre class="example">
mogrify -resize 50% *.jpg
</pre></li>

 <li> <p>
Downloading web pages  <i>recursively</i> (including all subpages, all pictures,
etc.):
</p>
 <div class="org-src-container">
 <pre class="src src-sh">wget --recursive https://example.org
</pre>
</div></li>

 <li> <p>
Downloading subtitles automatically, for multiple files(!) with  <a href="https://github.com/alexanderwink/subdl">subdl</a>:
</p>
 <div class="org-src-container">
 <pre class="src src-sh">subdl --lang=eng,spa my-video-1 my-video-2 etc.
</pre>
</div></li>
</ul> <p>
Possibly one of the reasons why the  <i>command line</i> is so infamous is because of
the very poor interfaces that we often come across (e.g. the default terminals
in most operating systems / desktop environements).  I think it’d be wise to
bring an end to those archaic interfaces, which is why I don’t want to
recommend anything that has to do with  <a href="https://en.wikipedia.org/wiki/Terminal_emulator">terminal emulators</a>.
</p>

 <p>
In my experience, Emacs offers a command line interface that has worked well for
years and that is here to stay.  After starting Emacs, you can bring up the
command line interface with  <code>Alt-x shell</code>.  Check out  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Interactive-Shell.html#Interactive-Shell">the manual</a> for more
details.  “Shell” in this context is a technical term for “user interface,” and it is
often associated with “command line user interface.”
</p>

 <p>
In  <a href="../emacs-eshell/index.html">another article</a> I wrote about the benefits of using Emacs as a command line
interface, compared to other terminals.  While this article deals with Eshell
(another command line interface in Emacs), most of it applies to  <code>Alt-x shell</code>.
I won’t recommend Eshell here because of its rather exotic syntax and its
shortcomings (such as with piped commands), which are likely to trip
non-programmers.
</p>
</div>
</div>

 <div id="outline-container-org67cb6eb" class="outline-2">
 <h2 id="org67cb6eb">Operating system: Guix</h2>
 <div class="outline-text-2" id="text-org67cb6eb">
 <p>
Since I’m only talking free software here, I won’t mention proprietary operating
systems.  This topic has been subject to intense flame wars for decades,
therefore I won’t delve too much into it.
</p>

 <p>
I believe  <a href="../guix-advance/index.html">Guix</a> to be possibly the most advanced operating system as of October
2019, in ways that are very practical to all of us:
</p>

 <ul class="org-ul"> <li>It cannot break!  You won’t fear upgrading the system or any program ever
again.</li>

 <li>It allows for going back in time (think “the Git of operating systems”), so
you can roll-back to previous versions of individual programs, or even the
whole system.</li>

 <li>It offers high-quality, up-to-date programs.</li>

 <li>It gives you very strong privacy and reliability guarantees.  Programs run as
expected and can’t really cheat you.</li>
</ul> <p>
The question: As a rather advanced technology, is it suitable to
non-programmers?
</p>

 <p>
I believe it is getting there: since 1.0 it comes with a rather simple installer
which makes it relatively easy to set up as long as your hardware is supported
(by 100% free software).
</p>

 <p>
If not, installing Guix is still possible but the process is a little more
involved.  Maybe in the (near?) future Guix will be easier to install on
non-free hardware thanks to the  <a href="https://gitlab.com/nonguix/nonguix/">Nonguix</a> channel.  But obviously a better
solution here would be that more hardware becomes more open.
</p>

 <p>
Either way, hardware is not a showstopper since Guix can be installed on top
of any other GNU/Linux distribution.  So you might just pick any popular
flavour, install Guix, then use it to install everything else.
</p>

 <p>
As of October 2019, the system configuration and package management with Guix
can be done via a multiple user interfaces:
</p>

 <ul class="org-ul"> <li>the command line,</li>
 <li> <a href="https://emacs-guix.gitlab.io/website/">Emacs Guix</a>,</li>
 <li> <a href="https://github.com/emacs-helm/helm-system-packages">Helm System Packages</a>.</li>
</ul> <p>
More graphical, easy-to-use interfaces are expected to be introduced hopefully
in the near future.
</p>
</div>
</div>

 <div id="outline-container-orgf7d2b01" class="outline-2">
 <h2 id="orgf7d2b01">Desktop environment: GNOME</h2>
 <div class="outline-text-2" id="text-orgf7d2b01">
 <p>
A  <a href="https://en.wikipedia.org/wiki/Desktop_environment">desktop environment</a> is the set of programs that make up for the graphical user
interface that’s exposed to the users when they log in.  For instance the window
manipulation, the “taskbar,” the file manager, the configuration panel, the
“applets,” all these things, which directly impact the user experience, are part
of the desktop environment.
</p>

 <p>
It’s to be distinguished from the operating system, since a same operating
system can offer multiple desktop environments.
</p>

 <p>
 <a href="https://www.gnome.org/">GNOME</a> might not be the ideal desktop environment I would envision, but it has
many perks which make it the most commendable desktop environment in my opinion:
</p>

 <ul class="org-ul"> <li>It’s battery-included, everything works out-of-the-box (bluetooth, USB
drives, etc.).</li>
 <li>It offers a great user experience (search everything, global view of everything).</li>
 <li>It’s visually appealing.</li>
 <li>It’s been stable for years and it’s actively maintained.</li>
 <li>While it requires significant storage space, it remains relatively light
compared to what 2019 hard drives offer.</li>
 <li>It runs smoothly on most hardware that has been manufactured over the last 10
years at least.</li>
</ul> <p>
In particular, lighter environments like Xfce might not show a visible performance
boost on most current hardware, at the cost of reduced usability (and arguably a
less appealing interface).
</p>
</div>
</div>

 <div id="outline-container-orgb6af7c3" class="outline-2">
 <h2 id="orgb6af7c3">Anonymous browsing: Tor</h2>
 <div class="outline-text-2" id="text-orgb6af7c3">
 <p>
Using a web browser to surf the web anonymously is quite a challenge these days.
It’s hard to keep track of the myriad of ways that we leave fingerprints while
browsing (from fonts to the window dimensions) which incidentally can be
used to track us.
</p>

 <p>
The  <a href="https://www.torproject.org/">Tor</a> project aims to protect your privacy online by circumventing all the
known ways of fingerprinting.  Tor is possibly more famous than it is used and
it seems to suffer from the misconception that it’s hard to setup.  It really is
not: the Tor project even ships an all-in-one browser with maximal security
settings.
</p>

 <p>
As a side-effect, Tor happens to be a convenient way to circumvent censorship in
your country: choose the exit node to the country you like and you’ll get the
desired IP.
</p>
</div>
</div>

 <div id="outline-container-org22ce9cc" class="outline-2">
 <h2 id="org22ce9cc">Private, decentralized communication: Jitsi</h2>
 <div class="outline-text-2" id="text-org22ce9cc">
 <p>
A very important concept to understand: we cannot trust non-free,
non-open-source software when it comes to privacy.
</p>

 <p>
So if a service promises you “end-to-end encryption,” don’t take for granted
that your data is safe.  It probably isn’t.
</p>

 <p>
A good communication system is:
</p>

 <ul class="org-ul"> <li>free and open source software;</li>
 <li>decentralized (at least everyone should be able to run their own instance of
the service, lest it makes us dependable);</li>
 <li>multi-platform;</li>
 <li>Zero setup to use, it should not even require the creation of an account.</li>
</ul> <p>
This last point is important: Because communication can only work between people
using the same protocol, it’s hard to get our acquaintances to use something other than
what they already use.
</p>

 <p>
The  <a href="https://jitsi.org/">Jitsi</a> software crosses all those check-boxes.  In particular:
</p>

 <ul class="org-ul"> <li>Video calls, chat, file sharing and screen sharing.</li>
 <li>It works in a browser, no need to install anything.</li>
 <li>You can invite multiple friends to a private discussion room simply by sharing
the URL.  No registration required.</li>
</ul></div>
</div>

 <div id="outline-container-orgc9e8d59" class="outline-2">
 <h2 id="orgc9e8d59">Programming: Racket</h2>
 <div class="outline-text-2" id="text-orgc9e8d59">
 <p>
Ha!  A section on programming for non-programmers, isn’t it ironic? :)
</p>

 <p>
Maybe not.  Writing simple programs is a skill that can be tremedously useful in
every-day life.  Batch processing thousands of items with a few lines of code
can save hours.
</p>

 <p>
Basic programming is also a common requirement in research.  More often than not
researchers use the programming language of their peers, which results in
communities getting stuck with aging and cumbersome programming languages.  I
believe we can do better.
</p>

 <p>
So I’d like to recommend a programming language that is:
</p>

 <ul class="org-ul"> <li>easy to learn,</li>
 <li>powerful,</li>
 <li>with minimal idiosyncracies,</li>
 <li>and zero setup.</li>
</ul> <p>
The setup part in particular can be a showstopper for many programming
languages.  Indeed, it often involves installing an interpreter or a compiler,
configuring an editor, setting up a dedicated package manager, and possibly more
steps.
</p>

 <p>
 <a href="https://racket-lang.org/">Racket</a> is one of the few languages that I can think of that fits the bill and
that seems very promising in the long term.
It comes with a zero-setup and ready-to-use editor, it has support for a wide
variety of applications (from web through math to databases), and it’s one of the
most advanced programming languages of its kind.
</p>

 <p>
Most importantly, since its inception, the Racket authors have put a lot of
emphasis on the educational part of the language.  It’s meant both as an
introductory language to programming as well as a medium to convey deeper
concepts in programming language theory.  The documentation is stellar for
beginners and  <a href="https://www.bootstrapworld.org/">many free courses</a> hold the readers by the hand until they become
more efficient computer users.
</p>
</div>
</div>

 <div id="outline-container-org0521f41" class="outline-2">
 <h2 id="org0521f41">Special Thanks</h2>
 <div class="outline-text-2" id="text-org0521f41">
 <p>
For their feeback, editing and ideas:
</p>

 <ul class="org-ul"> <li>Bou</li>
 <li>Tuedachu</li>
 <li>Simard le Barbon</li>
</ul></div>
</div>
</div>