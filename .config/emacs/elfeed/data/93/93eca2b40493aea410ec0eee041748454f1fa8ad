<div id="content">
 <p>
This is a follow-up to my first  <a href="../emacs/index.html">Emacs pro-tips</a>.
</p>

 <div id="outline-container-org681b8d1" class="outline-2">
 <h2 id="org681b8d1">Speed up initialization</h2>
 <div class="outline-text-2" id="text-org681b8d1">
 <p>
If you don’t use Emacs daemon or if you develop Emacs, you might find yourself
re-starting it a lot.  In which case it may be useful to keep startup time to a
minimum.
</p>

 <div class="org-src-container">
 <pre class="src src-elisp">;;; Temporarily reduce garbage collection during startup. Inspect `gcs-done'.
(defun ambrevar/reset-gc-cons-threshold ()
  (setq gc-cons-threshold (car (get 'gc-cons-threshold 'standard-value))))
(setq gc-cons-threshold (* 64 1024 1024))
(add-hook 'after-init-hook #'ambrevar/reset-gc-cons-threshold)

;;; Temporarily disable the file name handler.
(setq default-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
(defun ambrevar/reset-file-name-handler-alist ()
  (setq file-name-handler-alist
	(append default-file-name-handler-alist
		file-name-handler-alist))
  (cl-delete-duplicates file-name-handler-alist :test 'equal))
(add-hook 'after-init-hook #'ambrevar/reset-file-name-handler-alist)
</pre>
</div>
</div>
</div>

 <div id="outline-container-org3ff41b5" class="outline-2">
 <h2 id="org3ff41b5">Avoid the pitfall of “loading old bytecode instead of newer source”</h2>
 <div class="outline-text-2" id="text-org3ff41b5">
 <div class="org-src-container">
 <pre class="src src-elisp">(setq load-prefer-newer t)
</pre>
</div>
</div>
</div>

 <div id="outline-container-org3c6139b" class="outline-2">
 <h2 id="org3c6139b">Site Lisp folder for local packages and development</h2>
 <div class="outline-text-2" id="text-org3c6139b">
 <p>
We need to roll out our own function since we want the local site folder first
in the  <code>load-path</code>, while  <code>normal-top-level-add-subdirs-to-load-path</code> appends it
to the very end.
</p>

 <div class="org-src-container">
 <pre class="src src-elisp">(defun ambrevar/package-refresh-load-path (path)
  "Add every non-hidden sub-folder of PATH to `load-path'."
  (when (file-directory-p path)
    (dolist (dir (directory-files path t "^[^\\.]"))
      (when (file-directory-p dir)
	(setq load-path (add-to-list 'load-path dir))
	(dolist (subdir (directory-files dir t "^[^\\.]"))
	  (when (file-directory-p subdir)
	    (setq load-path (add-to-list 'load-path subdir))))))))
(let ((site-lisp (expand-file-name "site-lisp/" "~/.local/share/emacs/")))
  (add-to-list 'load-path site-lisp)
  (ambrevar/package-refresh-load-path site-lisp))
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgffcf83e" class="outline-2">
 <h2 id="orgffcf83e">Flyspell and whitespace-mode</h2>
 <div class="outline-text-2" id="text-orgffcf83e">
 <div class="org-src-container">
 <pre class="src src-elisp">(defun ambrevar/flyspell-and-whitespace-mode ()
  "Toggle `flyspell-mode' and `whitespace-mode'."
  (interactive)
  (if (derived-mode-p 'prog-mode)
      (flyspell-prog-mode)
    (flyspell-mode)
    (when flyspell-mode
      (flyspell-buffer)))
  (whitespace-mode 'toggle))

(global-set-key (kbd "<f9>") #'ambrevar/flyspell-and-whitespace-mode)
</pre>
</div>
</div>
</div>

 <div id="outline-container-org02c89a7" class="outline-2">
 <h2 id="org02c89a7">Download video URL at point</h2>
 <div class="outline-text-2" id="text-org02c89a7">
 <p>
The following requires the  <code>youtube-dl</code> program.
</p>

 <div class="org-src-container">
 <pre class="src src-elisp">(defun ambrevar/youtube-dl-at-point (&optional url)
  "Run 'youtube-dl' over the URL at point.
If URL is non-nil, use that instead."
  (interactive)
  (setq url (or url (thing-at-point-url-at-point)))
  (let ((eshell-buffer-name "*youtube-dl*"))
    (eshell)
    (when (eshell-interactive-process)
      (eshell t))
    (eshell-interrupt-process)
    (insert "cd ~/temp && youtube-dl " url)
    (eshell-send-input)))
</pre>
</div>

 <p>
See also  <a href="https://github.com/skeeto/youtube-dl-emacs">youtube-dl-emacs</a>.
</p>
</div>
</div>

 <div id="outline-container-orge7d161f" class="outline-2">
 <h2 id="orge7d161f">List current minor modes</h2>
 <div class="outline-text-2" id="text-orge7d161f">
 <div class="org-src-container">
 <pre class="src src-elisp">(defun ambrevar/current-minor-modes ()
  "Return the list of minor modes enabled in the current buffer."
  (interactive)
  (delq nil
	(mapcar (lambda (mode)
		  (if (and (boundp mode) (symbol-value mode))
		      mode))
		minor-mode-list)))
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgf7b171d" class="outline-2">
 <h2 id="orgf7b171d">Window management</h2>
 <div class="outline-text-2" id="text-orgf7b171d">
 <p>
Since I use  <a href="../emacs-everywhere/index.html">EXWM</a> as a window manager, I can dedicate the  <code>super</code> key to window
management.
</p>

 <p>
Some simple, yet efficient rules:
</p>

 <ul class="org-ul"> <li> <code>s-TAB</code>: Switch to last buffer.</li>
 <li> <code>s-<arrows></code> (or  <code>s-<hjkl></code> with Evil): select window in the chosen direction.</li>
 <li> <code>S-s-<arrows></code> (or  <code>S-s-<hjkl></code> with Evil): swap current window with window in
the chosen direction.</li>
 <li> <code>s-\</code>: Toggle between horizontal and vertical splitting.</li>
 <li> <code>s-o</code>: Toggle-hide all other windows.</li>
</ul> <p>
With Helm, I use  <code>C-c o</code> (or my custom binding  <code>S-RET</code>) to find a file or a
buffer in a new split window.
</p>

 <p>
I need some extra functions to implement the above workflow:
</p>

 <div class="org-src-container">
 <pre class="src src-elisp">(defun ambrevar/swap-windows (&optional w1 w2)
  "If 2 windows are up, swap them.
Else if W1 is a window, swap it with current window.
If W2 is a window too, swap both."
  (interactive)
  (unless (or (= 2 (count-windows))
	      (windowp w1)
	      (windowp w2))
    (error "Ambiguous window selection"))
  (let* ((w1 (or w1 (car (window-list))))
	 (w2 (or w2
		 (if (eq w1 (car (window-list)))
		     (nth 1 (window-list))
		   (car (window-list)))))
	 (b1 (window-buffer w1))
	 (b2 (window-buffer w2))
	 (s1 (window-start w1))
	 (s2 (window-start w2)))
    (with-temp-buffer
      ;; Some buffers like EXWM buffers can only be in one live buffer at once.
      ;; Switch to a dummy buffer in w2 so that we don't display any buffer twice.
      (set-window-buffer w2 (current-buffer))
      (set-window-buffer w1 b2)
      (set-window-buffer w2 b1))
    (set-window-start w1 s2)
    (set-window-start w2 s1))
  (select-window w1))
(global-set-key (kbd "C-x \\") 'swap-windows)

(defun ambrevar/swap-windows-left ()
  "Swap current window with the window to the left."
  (interactive)
  (ambrevar/swap-windows (window-in-direction 'left)))
(defun ambrevar/swap-windows-below ()
  "Swap current window with the window below."
  (interactive)
  (ambrevar/swap-windows (window-in-direction 'below)))
(defun ambrevar/swap-windows-above ()
  "Swap current window with the window above."
  (interactive)
  (ambrevar/swap-windows (window-in-direction 'above)))
(defun ambrevar/swap-windows-right ()
  "Swap current window with the window to the right."
  (interactive)
  (ambrevar/swap-windows (window-in-direction 'right)))

(defun ambrevar/switch-to-last-buffer ()
  "Switch to last open buffer in current window."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

(defun ambrevar/toggle-single-window ()
  "Un-maximize current window.
If multiple windows are active, save window configuration and
delete other windows.  If only one window is active and a window
configuration was previously save, restore that configuration."
  (interactive)
  (if (= (count-windows) 1)
      (when single-window--last-configuration
	(set-window-configuration single-window--last-configuration))
    (setq single-window--last-configuration (current-window-configuration))
    (delete-other-windows)))

(defun ambrevar/toggle-window-split ()
  "Switch between vertical and horizontal split.
It only works for frames with exactly two windows."
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
	     (next-win-buffer (window-buffer (next-window)))
	     (this-win-edges (window-edges (selected-window)))
	     (next-win-edges (window-edges (next-window)))
	     (this-win-2nd (not (and (<= (car this-win-edges)
					 (car next-win-edges))
				     (<= (cadr this-win-edges)
					 (cadr next-win-edges)))))
	     (splitter
	      (if (= (car this-win-edges)
		     (car (window-edges (next-window))))
		  'split-window-horizontally
		'split-window-vertically)))
	(delete-other-windows)
	(let ((first-win (selected-window)))
	  (funcall splitter)
	  (if this-win-2nd (other-window 1))
	  (set-window-buffer (selected-window) this-win-buffer)
	  (set-window-buffer (next-window) next-win-buffer)
	  (select-window first-win)
	  (if this-win-2nd (other-window 1))))))
</pre>
</div>
</div>
</div>

 <div id="outline-container-org14b734b" class="outline-2">
 <h2 id="org14b734b">Use FreeDesktop.org’s trash</h2>
 <div class="outline-text-2" id="text-org14b734b">
 <p>
Whenever Emacs “delete” a file (from  <code>dired</code>, Helm Find-Files or Elisp
primitives), tell Emacs to move it to the trash instead:
</p>

 <div class="org-src-container">
 <pre class="src src-elisp">(setq delete-by-moving-to-trash t)
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgf73665e" class="outline-2">
 <h2 id="orgf73665e">Lisp parentheses editing</h2>
 <div class="outline-text-2" id="text-orgf73665e">
 <p>
A recurring complaint with Lisp is the need for balancing parentheses.
</p>

 <p>
That is to say, on a blackboard…  Since such a task should pose no difficulty to
a computer and Emacs can obviously help here!
</p>

 <p>
First, let’s enable parenthesis highlighting.  I like to remove the delay so
that Emacs highlights the matching parenthesis instantly:
</p>

 <div class="org-src-container">
 <pre class="src src-elisp">;;; Show matching parenthesis
(show-paren-mode 1)
;;; By default, there’s a small delay before showing a matching parenthesis. Set
;;; it to 0 to deactivate.
(setq show-paren-delay 0)
(setq show-paren-when-point-inside-paren t)

(with-eval-after-load 'paren
  (set-face-background 'show-paren-match "#555555")
  (set-face-foreground 'show-paren-match "#def")
  (set-face-attribute 'show-paren-match nil :weight 'extra-bold))
</pre>
</div>

 <p>
Next, we can install the  <a href="https://github.com/Fanael/rainbow-delimiters"> <code>rainbow-delimiters</code></a> third-party package which colors
parentheses according to their depth.  This is no more than the moral equivalent
of indenting in C or other members of the Algol family.
</p>
</div>
</div>

 <div id="outline-container-org933cf73" class="outline-2">
 <h2 id="org933cf73">Goodbye Paredit, hello Lispy</h2>
 <div class="outline-text-2" id="text-org933cf73">
 <p>
Consider using  <a href="https://github.com/abo-abo/lispy">Lispy</a> which brings Lisp syntactic editing to a whole new level:
beside parenthesis balancing (which makes the previous section superfluous
altogether), it offers advanced expression navigation, code transforms, style
prettification and more.
</p>

 <p>
Have a looks at the demos for some concrete examples.
</p>

 <p>
If you think about it, Lispy is the obvious evolution of editor support for Lisp
editing: it truly exploits the fact that the language syntax is an abstract
syntax tree.  It would be a shame not to make use of this property.
</p>
</div>
</div>

 <div id="outline-container-org67f172e" class="outline-2">
 <h2 id="org67f172e">Image manipulation and thumbnail gallery</h2>
 <div class="outline-text-2" id="text-org67f172e">
 <p>
A maybe not-so-well-known command is  <code>image-dired</code>: when run in a directory of
pictures, it displays a gallery of thumbnails with previews.   <code>SPC</code> displays the
next picture in another window while  <code>C-RET</code> opens the picture in the
 <code>image-dired-external-viewer</code>.  It’s possible to rotate files, tag them in dired
or add comments.
</p>

 <p>
The  <a href="https://github.com/mhayashi1120/Emacs-imagex"> <code>image+</code></a> third-party package adds extra picture capabilities to Emacs, like
stiky transforms and file modifications.
</p>
</div>
</div>

 <div id="outline-container-orgc4f51f4" class="outline-2">
 <h2 id="orgc4f51f4">Don’t use terminal-Emacs</h2>
 <div class="outline-text-2" id="text-orgc4f51f4">
 <p>
 <a href="https://blog.aaronbieber.com/2016/12/29/don-t-use-terminal-emacs.html">https://blog.aaronbieber.com/2016/12/29/don-t-use-terminal-emacs.html</a>
</p>
</div>
</div>

 <div id="outline-container-orge3e6d39" class="outline-2">
 <h2 id="orge3e6d39">Making music in Emacs</h2>
 <div class="outline-text-2" id="text-orge3e6d39">
 <p>
 <a href="https://vimeo.com/22798433">Quick Intro to Live Programming with Overtone</a>
</p>
</div>
</div>

 <div id="outline-container-orgb33b050" class="outline-2">
 <h2 id="orgb33b050">Emacs chart library</h2>
 <div class="outline-text-2" id="text-orgb33b050">
 <p>
 <a href="http://francismurillo.github.io/2017-04-15-Exploring-Emacs-chart-Library/">http://francismurillo.github.io/2017-04-15-Exploring-Emacs-chart-Library/</a>
</p>
</div>
</div>

 <div id="outline-container-org12a73ba" class="outline-2">
 <h2 id="org12a73ba">Odd nconc behaviour</h2>
 <div class="outline-text-2" id="text-org12a73ba">
 <p>
One of the few oddities in the Elisp language:
 <a href="https://stackoverflow.com/questions/25157349/odd-behaviour-with-nconc-in-emacs-lisp">https://stackoverflow.com/questions/25157349/odd-behaviour-with-nconc-in-emacs-lisp</a>
</p>
</div>
</div>

 <div id="outline-container-org8d03f33" class="outline-2">
 <h2 id="org8d03f33">Display or import iCalendar .ics files</h2>
 <div class="outline-text-2" id="text-org8d03f33">
 <p>
Emacs can do this out of the box with  <code>M-x icalendar-import-file</code>.
Also see  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Importing-Diary.html">https://www.gnu.org/software/emacs/manual/html_node/emacs/Importing-Diary.html</a>.
</p>
</div>
</div>

 <div id="outline-container-org3e30816" class="outline-2">
 <h2 id="org3e30816">References</h2>
 <div class="outline-text-2" id="text-org3e30816">
 <ul class="org-ul"> <li> <a href="http://emacs.sexy/">http://emacs.sexy/</a></li>
 <li> <a href="https://writequit.org/org/">https://writequit.org/org/</a></li>
 <li> <a href="http://doc.rix.si/cce/cce.html">Emacs as a Complete Computing Environment</a></li>
 <li> <a href="https://github.com/bbatsov/emacs-lisp-style-guide/">The Emacs Lisp Style Guide</a></li>
 <li> <a href="https://two-wrongs.com/why-you-should-buy-into-the-emacs-platform">Why You Should Buy Into the Emacs Platform</a></li>
</ul> <p>
Environment bootstraps:
</p>

 <ul class="org-ul"> <li> <a href="http://emacs-bootstrap.com/">http://emacs-bootstrap.com/</a> (generic)</li>
 <li> <a href="https://portacle.github.io/">https://portacle.github.io/</a> (Common Lisp)</li>
</ul></div>
</div>
</div>